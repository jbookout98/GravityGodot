[gd_resource type="ShaderMaterial" load_steps=11 format=2]

[ext_resource path="res://planet.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeTexture" id=16]
texture = ExtResource( 1 )

[sub_resource type="Gradient" id=11]
offsets = PoolRealArray( 0.276382, 0.437186, 0.924623 )
colors = PoolColorArray( 0.851563, 0.838257, 0.838257, 1, 0.496094, 0.496094, 0.496094, 1, 0, 0, 0, 1 )

[sub_resource type="GradientTexture" id=7]
gradient = SubResource( 11 )

[sub_resource type="VisualShaderNodeTexture" id=8]
texture = SubResource( 7 )

[sub_resource type="VisualShaderNodeColorOp" id=12]
operator = 8

[sub_resource type="VisualShaderNodeScalarOp" id=13]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=14]
source = 2

[sub_resource type="VisualShaderNodeInput" id=15]
input_name = "uv"

[sub_resource type="VisualShader" id=9]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_4;
uniform sampler2D tex_frg_10;



void vertex() {
// Output:0

}

void fragment() {
// Input:9
	vec3 n_out9p0 = vec3(UV, 0.0);

// Texture:8
	vec3 n_out8p0;
	float n_out8p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out9p0.xy);
		n_out8p0 = _tex_read.rgb;
		n_out8p1 = _tex_read.a;
	}

// Texture:4
	vec4 tex_frg_4_read = texture(tex_frg_4, UV.xy);
	vec3 n_out4p0 = tex_frg_4_read.rgb;
	float n_out4p1 = tex_frg_4_read.a;

// ColorOp:5
	vec3 n_out5p0;
	{
		float base = n_out8p0.x;
		float blend = n_out4p0.x;
		if (base < 0.5) {
			n_out5p0.x = (base * (2.0 * blend));
		} else {
			n_out5p0.x = (1.0 - (1.0 - base) * (1.0 - 2.0 * (blend - 0.5)));
		}
	}
	{
		float base = n_out8p0.y;
		float blend = n_out4p0.y;
		if (base < 0.5) {
			n_out5p0.y = (base * (2.0 * blend));
		} else {
			n_out5p0.y = (1.0 - (1.0 - base) * (1.0 - 2.0 * (blend - 0.5)));
		}
	}
	{
		float base = n_out8p0.z;
		float blend = n_out4p0.z;
		if (base < 0.5) {
			n_out5p0.z = (base * (2.0 * blend));
		} else {
			n_out5p0.z = (1.0 - (1.0 - base) * (1.0 - 2.0 * (blend - 0.5)));
		}
	}

// Texture:10
	vec4 tex_frg_10_read = texture(tex_frg_10, UV.xy);
	vec3 n_out10p0 = tex_frg_10_read.rgb;
	float n_out10p1 = tex_frg_10_read.a;

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = dot(n_out10p0, vec3(0.333333, 0.333333, 0.333333));

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -195.623, -15.9022 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1040, 100 )
nodes/fragment/4/node = SubResource( 8 )
nodes/fragment/4/position = Vector2( 200, 160 )
nodes/fragment/5/node = SubResource( 12 )
nodes/fragment/5/position = Vector2( 720, 40 )
nodes/fragment/6/node = SubResource( 13 )
nodes/fragment/6/position = Vector2( 780, 120 )
nodes/fragment/8/node = SubResource( 14 )
nodes/fragment/8/position = Vector2( 380, 0 )
nodes/fragment/9/node = SubResource( 15 )
nodes/fragment/9/position = Vector2( 100, 60 )
nodes/fragment/10/node = SubResource( 16 )
nodes/fragment/10/position = Vector2( 740, 200 )
nodes/fragment/connections = PoolIntArray( 4, 0, 5, 1, 4, 0, 6, 1, 9, 0, 8, 0, 8, 0, 6, 0, 8, 0, 5, 0, 5, 0, 0, 0, 10, 0, 0, 1 )

[resource]
shader = SubResource( 9 )
